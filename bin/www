#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//database
var mongoose = require('mongoose');
var playListS = require( './model.js');
var uristring = require( './config.js')
var db = mongoose.connection;

db.on('error', console.error);
db.once('open', function(){
  console.log('Connection db');
  console.log('disconnect db');
});

mongoose.connect(uristring);

//socket io
var io = require( 'socket.io' )( server );
io.on( 'connection', function( socket ){
  var id;

  console.log( 'new user.')
  socket.on( 'disconnect', function(){
    console.log( 'user disconnect');
  });

  socket.on( 'register', function(data){
    id = data;
    socket.join( id );
    playListS.find({ session : id}, function(err, sendPlayList){
      io.to(id).emit('loadPlayList', sendPlayList);
    });

  })


  // video function
  socket.on( 'play', function(){
    console.log('play');
    io.to(id).emit('play');
  })

  socket.on( 'pause', function(){
    console.log('pause');
    io.to(id).emit('pause');
  })

  socket.on( 'stop', function(){
    console.log('stop');
    io.to(id).emit('stop');
  })

  socket.on( 'unMute', function(){
    console.log('unMute');
    io.to(id).emit('unMute');
  })

  socket.on( 'mute', function(){
    console.log('mute');
    io.to(id).emit('mute');
  })

  socket.on( 'rewind', function(){
    console.log('rewind');
    io.to(id).emit('rewind');
  })

  socket.on( 'forward', function(){
    console.log('forward');
    io.to(id).emit('forward');
  })

  socket.on( 'previous', function(){
    console.log('previous');
    io.to(id).emit('previous');
  })

  socket.on( 'next', function(){
    console.log('next');
    io.to(id).emit('next');
  })

  socket.on( 'addVideo', function(data1, data2){
    console.log("addVideo");
    var addplayList = new playListS({
      session : id,
      videoId : data1,
      title : data2
    });

    addplayList.save( function(err){
      if(err)
        throw err;
      else
        console.log('saved');
    });


    io.to(id).emit('addVideo', data1, data2);

  })

  socket.on( 'selectVideo', function(data){
    io.to(id).emit('selectVideo', data);
  })

  socket.on( 'deleteVideo', function(data){
    console.log(data);
    var  query = playListS.find().remove({session: id, videoId: data});
    query.exec();
    playListS.find({ session : id}, function(err, sendPlayList){
      io.to(id).emit('loadPlayList', sendPlayList);
    });
  })

  socket.on( 'clearAll', function(){
    console.log("clearAll");
    var query = playListS.find().remove({session: id});
    query.exec();
    io.to(id).emit('clearAll');
  })

}

);
